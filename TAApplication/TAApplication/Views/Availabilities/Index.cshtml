@model TAApplication.Models.Availability
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/6.2.0/browser/pixi.js"></script>
@*<script src="~/js/Availability/Availability.js" type="module"></script>*@

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<div id="canvas_div">
</div>

<script type="text/javascript">
    //$("#save_me").hide();

    let bg_color = 0xabcdef;

    app = new PIXI.Application({ backgroundColor: bg_color });
    app.renderer.resize(800, 800);
    let mousedown = false;
    var typeselected = false;
    $("#canvas_div").append(app.view);

    $("#canvas_div").on('mousedown', function (e) {
        mousedown = true;
    });

    $("#canvas_div").on('mouseup', function (e) {
        mousedown = false;
    });

    //$("#canvas_div").on('mousemove', function (e) {
    //    if (mousedown) {
    //        var elem = document.elementFromPoint(e.clientX, e.clientY)
    //        elem.selected = !elem.selected;
    //        //$("#save_me").show();

    //        console.log(`I am ${elem.id}`);
    //        elem.draw_me();
    //    }

    //});

    class Slot extends PIXI.Graphics {
        on_color = 0xbb500;
        off_color = 0xbbbbbb;
        selected = false;
        width = 100;
        height = 10;
        //text;

        color = 0xffffff;

        constructor(id, x, y) {
            super();

            this.x = x;
            this.y = y;
            this.id = id;
            this.selected = false;
            //this.text = new PIXI.Text(`I am ${id}`);

            this.interactive = true;

            this.init_draw();

            app.stage.addChild(this);
            this.on('mousedown', function (e) {
                if (this.selected) {
                    typeselected = true;
                }
                else {
                    typeselected = false;
                }
            });

            this.on('mousemove', function (e) {
                if (mousedown) {
                    //console.log("here")
                    //console.log()
                    if (e.data.global.x >= this.x && e.data.global.x <= this.x + this.width
                        && e.data.global.y >= this.y && e.data.global.y <= this.y + this.height) {
                        //$("#save_me").show();
                        //console.log(`I am ${this.id}`);
                        this.draw_me();
                    }
                }
            });
            //this.addChild(this.text);
            //this.text.visible = false;
        }

        draw_me() {
            if(typeselected == this.selected)
            {
                this.selected = !this.selected;
                if(typeselected)
                {
                    this.clear();
                    this.beginFill(this.off_color);
                    this.drawRect(0, 0, this.width, this.height);
                }
                else
                {
                    this.clear();
                    this.beginFill(this.on_color);
                    this.drawRect(0, 0, this.width, this.height);
                }
            }
        }

        init_draw(){
            this.clear();
            this.beginFill(this.off_color);
            this.drawRect(0, 0, this.width, this.height);
        }

    }


    /////////////////////// Main Program ///////////////////

    for (let i = 0; i < 5; i++) {
        let x = ((i + 1) * 100);
        for (let j = 0; j < 48; j++) {
            new Slot(j + (i * 48), x, 10 + j * 10);
        }
    }

    function doit() {
        //$("#save_me").hide();
    }
</script>